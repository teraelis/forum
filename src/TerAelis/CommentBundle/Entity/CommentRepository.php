<?php

namespace TerAelis\CommentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use TerAelis\ForumBundle\Entity\Post;

/**
 * ThreadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository
{
    public function findOneById($id) {
        $comments = $this->createQueryBuilder('c')
            ->where('c.id = '.$id)
            ->join('c.thread', 't')
            ->join('t.post', 'p')
            ->join('p.mainCategorie', 'cat')
            ->addSelect('t')
            ->addSelect('p')
            ->addSelect('cat')
            ->getQuery()
            ->setMaxResults(1)
            ->getResult();
        $res = null;
        foreach ($comments as $c) {
            $res = $c;
        }
        return $res;
    }

    /**
     * @param $id
     * @return Comment
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findQuotedOneById($id) {
        return $this->createQueryBuilder('c')
            ->where('c.id = '.$id)
            ->join('c.author', 'a')
            ->join('c.thread', 't')
            ->join('t.post', 'p')
            ->join('p.mainCategorie', 'cat')
            ->addSelect('a')
            ->addSelect('t')
            ->addSelect('p')
            ->addSelect('cat')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    public function findAllByThread($thread) {
        return $this->createQueryBuilder('c')
            ->join('c.thread', 't')
            ->where('t.id = '.$thread->getId())
            ->getQuery()
            ->getResult();
    }

    public function findByThread($thread, $nb = 15, $page = 1, $answer = 0) {
        return $this->createQueryBuilder('c')
            ->join('c.thread', 't')
            ->where('t.id = '.$thread->getId())
            ->orderBy('c.createdAt', ($answer == 0 ? 'ASC' : 'DESC'))
            ->getQuery()
            ->setFirstResult(($page - 1) * $nb)
            ->setMaxResults($nb)
            ->getResult();
    }

    public function findLastFromThread($thread) {
        $comments = $this->createQueryBuilder('c')
            ->join('c.thread', 't')
            ->where('t.id = '.$thread->getId())
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getResult();
        $res = null;
        foreach ($comments as $c) {
            $res = $c;
        }
        return $res;
    }

    public function findLastFromCategorie($categorie) {
        $comments = $this->createQueryBuilder('c')
            ->join('c.thread', 't')
            ->join('t.post', 'p')
            ->join('p.mainCategorie', 'cat')
            ->where('cat.id = '.$categorie->getId())
            ->orderBy('c.createdAt', 'DESC')
            ->addSelect('t')
            ->getQuery()
            ->setMaxResults(1)
            ->getResult();
        $res = null;
        foreach ($comments as $c) {
            $res = $c;
        }
        return $res;
    }

    /**
     * @param $post
     * @return Comment
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findLastFromPost($post) {
        $comment = $this->createQueryBuilder('c')
            ->join('c.thread', 't')
            ->join('t.post', 'p')
            ->join('c.author', 'a')
            ->addSelect('a')
            ->where('p.id = '.$post->getId())
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
        return $comment;
    }

    public function findNextComment($comment, $thread) {
        $next = $this->createQueryBuilder('c')
            ->join('c.thread', 't')
            ->where('t.id = '.$thread->getId())
            ->andWhere('c.id > '.$comment->getId())
            ->orderBy('c.id', 'ASC')
            ->getQuery()
            ->setMaxResults(1)
            ->getResult();
        $res = null;
        foreach ($next as $c) {
            $res = $c;
        }
        return $res;
    }

    public function getNumber() {
        return $this->createQueryBuilder('c')
            ->select('COUNT(c.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getNumberCommentOlder(Post $post, Comment $comment) {
        $t = $comment->getThread();
        $builder = $this->createQueryBuilder('c');

        return $this->createQueryBuilder('c')
            ->select('COUNT(c.id)')
            ->join('c.thread', 't')
            ->where('t.id = '.$t->getId())
            ->andWhere($builder->expr()->gt('c.createdAt', ':date'))
            ->setParameter('date', $comment->getCreatedAt())
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getNumberById($id) {
        return $this->createQueryBuilder('c')
            ->select('COUNT(c.id)')
            ->join('c.author', 'a')
            ->where('a.id = '.$id)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findByUser($id, $cat, $nb, $offset = 0) {
        $where = "";
        foreach($cat as $c) {
            $where = $where.' or cs.id = '.$c;
        }
        $where = substr($where, 4);

        return $this->createQueryBuilder('c')
            ->join('c.author', 'a')
            ->join('c.thread', 't')
            ->join('t.post', 'p')
            ->leftjoin('p.balise', 'b')
            ->join('p.mainCategorie', 'cat')
            ->addSelect('p.slug, b.court, p.title')
            ->addSelect('cat.root')
            ->join('p.categories', 'cs')
            ->where($where)
            ->andWhere('a.id = :id')
            ->getQuery()
            ->setFirstResult($offset)
            ->setMaxResults($nb)
            ->setParameter('id', $id)
            ->getResult();
    }

    public function findLastByUser($id) {
        return $this->createQueryBuilder('c')
            ->join('c.author', 'u')
            ->where('u.id = '.$id)
            ->orderBy('c.createdAt', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param int[] $threadsIds
     * @return array
     */
    public function findStats($threadsIds)
    {
        $where = '';
        foreach($threadsIds as $id) {
            $where .= ' or t.id = '.$id;
        }
        if(!empty($where)) {
            $where = substr($where, 4);
        }
        return $this->createQueryBuilder('c')
            ->join('c.thread', 't')
            ->select('t.id as id')
            ->addSelect('count(c.id) as nb_comment')
            ->where($where)
            ->groupBy('t.id')
            ->getQuery()
            ->getArrayResult();
    }

    public function findNbCreatedByUserSince($date)
    {
        $builder = $this->_em->createQueryBuilder()
            ->from('TerAelisUserBundle:User', 'a')
            ->join('a.comments', 'c');
        if(!empty($date)) {
            $builder = $builder->where('c.createdAt > :date')
                ->setParameter(':date', $date);
        }
        return $builder
            ->andWhere('c.createdAt <= :now')
            ->setParameter(':now', new \DateTime())
            ->groupBy('a.id')
            ->select('a as user')
            ->addSelect('count(c.id) as nb_commentaire')
            ->getQuery()
            ->getResult();
    }

    public function findByPoleSince($date)
    {
        $builder = $this->_em->createQueryBuilder()
            ->from('TerAelisForumBundle:Categorie', 'c')
            ->join('c.posts', 'p')
            ->join('p.threads', 't')
            ->join('t.comments', 'com');
        if(!empty($date)) {
            $builder = $builder->where('com.createdAt > :date')
                ->setParameter(':date', $date);
        }
        return $builder
            ->andWhere('com.createdAt <= :now')
            ->setParameter(':now', new \DateTime())
            ->groupBy('c.id')
            ->select('c as categorie')
            ->addSelect('count(com.id) as nb_comment')
            ->getQuery()
            ->getResult();
    }
}
