<?php

namespace TerAelis\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    public function findByGroup($id) {
        return $this->createQueryBuilder('u')
            ->join('u.userRole', 'ug')
            ->join('ug.groupe', 'g')
            ->where("g.id = ".$id)
            ->getQuery()
            ->getResult();
    }

    public function findModsByGroup($id) {
        $query = $this->createQueryBuilder('u')
            ->join('u.userRole', 'ug')
            ->join('ug.groupe', 'g')
            ->where("g.id = :id and ug.role = 'mod'")
            ->setParameter('id', $id)
            ->getQuery();
        return $query->getResult();
    }

    public function findUsersByGroup($id) {
        return $this->createQueryBuilder('u')
            ->join('u.userRole', 'ug')
            ->join('ug.groupe', 'g')
            ->where("g.id = ".$id." and ug.role = 'usr'")
            ->getQuery()
            ->getResult();
    }

    /**
     * @param $name
     * @return User[]
     */
    public function findByName($name) {
        return $this->createQueryBuilder('u')
            ->where("u.username = ?1 or u.usernameCanonical = ?2")
            ->getQuery()
            ->setParameters(array(
                1 => $name,
                2 => $name,
            ))
            ->getResult();
    }

    public function findOneByName($name) {
        return $this->createQueryBuilder('u')
            ->where("u.username = ?1 or u.usernameCanonical = ?2")
            ->setParameters(array(
                1 => $name,
                2 => $name,
            ))
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    public function getOnline() {
        $date = new \DateTime();
        $date->sub(new \DateInterval('PT10M'));
        $query = $this->createQueryBuilder('u')
            ->where('u.lastVisit > :date')
            ->setParameter('date', $date)
            ->orderBy('u.username')
            ->getQuery();
        $res = $query->getResult();
        return array('result' => $res, 'count' => count($res));
    }

    public function getShortList($id) {
        $date = new \DateTime();
        $date->sub(new \DateInterval('P01D'));
        $query = $this->createQueryBuilder('u')
            ->where('u.lastVisit > :date')
            ->andWhere('u.id != :id')
            ->setParameter('id', $id)
            ->setParameter('date', $date)
            ->getQuery();
        return $query
            ->getResult();
    }

    public function getNumber() {
        return $this->createQueryBuilder('u')
            ->select('COUNT(u.id)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findByRangs($rangs) {
        $where = "";
        foreach($rangs as $r) {
            $where = $where.' or r.id = '.$r->getId();
        }
        $where = substr($where, 4);

        return $this->createQueryBuilder('u')
            ->join('u.rangs', 'r')
            ->where($where)
            ->getQuery()
            ->getResult();
    }

    public function findNewColor($id) {
        $res = $this->createQueryBuilder('u')
            ->join('u.groups', 'g')
            ->select('g.id')
            ->where('u.id = :id')
            ->orderBy('g.ordre', 'ASC')
            ->getQuery()
            ->setMaxResults(1)
            ->setParameter('id', $id)
            ->getResult();
        $return = null;
        foreach($res as $r) {
            $return = $r;
        }
        return $return;
    }

    public function findByUsernameCanonical($arrayUsers) {
        $where = "";
        foreach($arrayUsers as $u) {
            $where = $where." or u.usernameCanonical = '".$u."'";
        }
        $where = substr($where, 4);

        if($where != "") {
            $res = $this->createQueryBuilder('u')
                ->where($where)
                ->getQuery()
                ->getResult();
        } else {
            $res = new \Doctrine\Common\Collections\ArrayCollection;
        }
        return $res;
    }

    /**
     * @param $user
     * @return User[]
     */
    public function getContacts($user, $nb = null) {
        $where ="";
        foreach($user->getSalons() as $r) {
            $where = $where." or s.id = ".$r->getId();
        }
        if (strlen($where) == 0) {
            return [];
        }
        $where = substr($where, 4);

        $builder = $this->createQueryBuilder('u1')
            ->join('u1.salons', 's')
            ->join('s.users', 'u2')
            ->where($where)
            ->andWhere('s.private = 1')
            ->andWhere('u1.id != '.$user->getId())
            ->andWhere('u2.id = '.$user->getId())
            ->addSelect('s')
            ->orderBy('s.lastUpdate', 'DESC');
        if(!empty($nb)) {
            $builder = $builder->setMaxResults($nb);
        }
        return $builder->getQuery()
            ->getResult();
    }
}
