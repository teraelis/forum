<?php

namespace TerAelis\ForumBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    public function findByThread($id)
    {
        return $this->createQueryBuilder('p')
            ->join('p.threads', 't')
            ->where('t.id = ' . $id)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * @param $id
     * @return Post
     */
    public function findOneById($id)
    {
        return $this->createQueryBuilder('p')
            ->join('p.formulaireDonnees', 'f')
            ->join('p.mainCategorie', 'c')
            ->addSelect('f')
            ->addSelect('c')
            ->where('p.id = :id')
            ->setParameter(':id', $id)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getSujet($slug)
    {
        return $this->createQueryBuilder('p')
            ->where('p.slug = :slug')
            ->setParameter('slug', $slug)
            ->leftJoin('p.tags', 'ta')
            ->addSelect('ta')
            ->leftJoin('p.threads', 't')
            ->addSelect('t')
            ->leftJoin('t.comments', 'com')
            ->addSelect('com')
            ->leftJoin('com.author', 'au')
            ->addSelect('au')
            ->leftJoin('au.rangs', 'ra')
            ->addSelect('ra')
            ->leftJoin('au.groups', 'gr')
            ->addSelect('gr')
            ->leftJoin('p.balise', 'b')
            ->addSelect('b')
            ->leftJoin('p.sondage', 's')
            ->addSelect('s')
            ->leftJoin('p.formulaireDonnees', 'f')
            ->addSelect('f')
            ->leftJoin('f.type', 'ft')
            ->addSelect('ft')
            ->leftJoin('p.authors', 'a')
            ->addSelect('a')
            ->leftJoin('a.rangs', 'r')
            ->addSelect('r')
            ->leftJoin('a.groups', 'g')
            ->addSelect('g')
            ->leftJoin('p.mainCategorie', 'c')
            ->addSelect('c')
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getSujetsCategorie($id, $nb = 15, $offset = 0)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.categories', 'c')
            ->where('c.id = ' . $id)
            ->andWhere('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->Leftjoin('p.balise', 'b')
            ->leftJoin('p.typeSujet', 'ts')
            ->leftJoin('p.authors', 'a')
            ->leftJoin('p.tags', 't')
            ->addOrderBy('ts.ordre', 'DESC')
            ->addOrderBy('p.lastComment', 'DESC')
            ->leftJoin('p.lastAuthor', 'au')
            ->addSelect('b')
            ->addSelect('ts')
            ->addSelect('t')
            ->addSelect('a')
            ->addSelect('au')
            ->setParameter('today', new \DateTime());
        return $qb->getQuery()
            ->setFirstResult($offset)
            ->setMaxResults($nb)
            ->getResult();
    }

    public function countSujetsMainCategorie($id)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.mainCategorie', 'c')
            ->where('c.id = ' . $id)
            ->andWhere('p.datePublication < :today')
            ->setParameter('today', new \DateTime());
        return count($qb->getQuery()
            ->getArrayResult());
    }

    public function findByMainCategorie($categorie)
    {
        return $this->createQueryBuilder('p')
            ->join('p.mainCategorie', 'c')
            ->where('c.id = ' . $categorie->getId())
            ->andWhere('p.datePublication < :today')
            ->leftJoin('p.authors', 'a')
            ->addSelect('a')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->getResult();
    }

    public function findLastByCategorie($categorie)
    {
        $res = $this->createQueryBuilder('p')
            ->join('p.mainCategorie', 'c')
            ->where('c.id = ' . $categorie->getId())
            ->andWhere('p.datePublication <= :today')
            ->andWhere('p.publie = 1')
            ->setParameter('today', new \DateTime())
            ->orderBy('p.lastComment', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
        return $res;
    }

    public function getLastPosts($arrayCategories)
    {
        $where = "";
        foreach ($arrayCategories as $c) {
            $where = $where . ' or (c.lft >= ' . $c->getLft() . ' and c.rgt <= ' . $c->getRgt() . ')';
        }
        if (strlen($where) == 0) {
            return [];
        }
        $where = substr($where, 4);
        $posts = $this->createQueryBuilder('p')
            ->select(('p as post, max(p.lastComment) as last_comment'))
            ->join('p.mainCategorie', 'c')
            ->where($where)
            ->andWhere('p.datePublication < :today')
            ->groupBy('p.mainCategorie')
            ->addSelect('c')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->getResult();
        return $posts;
    }

    public function findByTags($tags = array(), $perm)
    {
        if (strlen(count($tags)) == 0) {
            return [];
        }

        $whereTag = "";
        foreach ($tags as $t) {
            $whereTag = $whereTag . ' or t.id >= ' . $t->getId();
        }
        $whereTag = substr($whereTag, 4);

        $wherePerm = "";
        foreach ($perm['voirCategorie'] as $c) {
            if ($c == 1) {
                $wherePerm = $wherePerm . ' or c.id >= ' . $c;
            }
        }
        $wherePerm = substr($wherePerm, 4);

        $posts = $this->createQueryBuilder('p')
            ->join('p.tags', 't')
            ->where($whereTag)
            ->join('p.categories', 'c')
            ->andwhere($wherePerm)
            ->andWhere('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->orderBy('p.lastComment', 'DESC')
            ->addOrderBy('t.tag', 'ASC')
            ->Leftjoin('p.balise', 'b')
            ->leftJoin('p.typeSujet', 'ts')
            ->leftJoin('p.authors', 'a')
            ->addorderBy('ts.ordre', 'DESC')
            ->addorderBy('p.lastComment', 'DESC')
            ->addSelect('b')
            ->addSelect('ts')
            ->addSelect('a')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->getResult();
        return $posts;
    }

    public function getNumber()
    {
        return $this->createQueryBuilder('p')
            ->select('COUNT(p.id)')
            ->where('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getNumberById($id)
    {
        return $this->createQueryBuilder('p')
            ->select('COUNT(p.id)')
            ->join('p.authors', 'a')
            ->where('a.id = ' . $id)
            ->andWhere('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getLastPoles($arrayPoles, $nb, $categoriesId)
    {
        $where = "";
        foreach ($arrayPoles as $p) {
            $where = $where . ' or c.root = ' . $p;
        }
        $where = substr($where, 4);

        $whereId = join(' or ', array_map(function($value) { return 'c.id = '.$value; }, $categoriesId));

        return $this->createQueryBuilder('p')
            ->join('p.mainCategorie', 'c')
            ->where($where)
            ->andWhere($whereId)
            ->andWhere('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->join('p.authors', 'a')
            ->leftJoin('p.balise', 'b')
            ->leftJoin('p.formulaireDonnees', 'f')
            ->leftJoin('p.threads', 't')
            ->leftJoin('t.comments', 'com')
            ->leftJoin('com.author', 'au')
            ->orderBy('p.lastComment', 'DESC')
            ->addOrderBy('com.createdAt', 'DESC')
            ->addSelect('c')
            ->addSelect('a')
            ->addSelect('au')
            ->addSelect('t')
            ->addSelect('com')
            ->addSelect('b')
            ->addSelect('f')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->setMaxResults($nb)
            ->getResult();
    }

    public function getSujetsByRoot($root, $nb)
    {
        return $this->createQueryBuilder('p')
            ->join('p.categories', 'c')
            ->addSelect('c')
            ->where('c.root = :root')
            ->andWhere('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->join('p.authors', 'a')
            ->addSelect('a')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->setMaxResults($nb)
            ->setParameter('root', $root)
            ->getResult();
    }

    public function findByUser($id, $cat, $nb, $offset = 0)
    {
        $where = "";
        foreach ($cat as $c) {
            $where = $where . ' or cs.id = ' . $c;
        }
        $where = substr($where, 4);

        return $this->createQueryBuilder('p')
            ->join('p.authors', 'a')
            ->join('p.categories', 'cs')
            ->where($where)
            ->andWhere('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->join('p.mainCategorie', 'c')
            ->addSelect('c')
            ->andWhere('a.id = :id')
            ->getQuery()
            ->setFirstResult($offset)
            ->setMaxResults($nb)
            ->setParameter('id', $id)
            ->setParameter('today', new \DateTime())
            ->getResult();
    }

    public function findLastByUser($id) {
        return $this->createQueryBuilder('p')
            ->join('p.authors', 'u')
            ->where('u.id = '.$id)
            ->orderBy('p.createdAt', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /* Récupère l'ensemble des derniers posts de la catégorie $c, et de chacun de ses parents */
    public function getLastPost(Categorie $c)
    {
        $lastDates = $this->createQueryBuilder('p')
            ->join('p.mainCategorie', 'c')
            ->addSelect('c')
            ->addSelect('MAX(p.lastComment) as max_lastComment')
            ->where('c.lft <= ' . $c->getLft() . ' and c.rgt >= ' . $c->getRgt() . ' and c.root = ' . $c->getRoot())
            ->andWhere('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->groupBy('p.mainCategorie')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->getArrayResult();
        $where = "";
        $i = 0;
        $parameters = array();
        foreach ($lastDates as $p) {
            $i++;
            $where .= " or p.lastComment = :p" . $i;
            $parameters['p' . $i] = $p['max_lastComment'];
        }
        if (strlen($where) <= 0) {
            return array();
        } else {
            $where = substr($where, 4);
            $query = $this->createQueryBuilder('p')
                ->join('p.mainCategorie', 'c')
                ->addSelect('c')
                ->where($where)
                ->getQuery();
            return $query->setParameters($parameters)
                ->getResult();
        }

    }

    public function getStatsByCategories($categories)
    {
        $categoriesId = array();
        foreach ($categories as $cat) {
            $categoriesId[] = $cat->getId();
        }
        return $this->createQueryBuilder('p')
            ->join('p.mainCategorie', 'c')
            ->select('c.id as id')
            ->addSelect('count(p.id) as nb_post')
            ->addSelect('sum(p.numberComment) as nb_comment')
            ->where('c.id IN(' . join(',', $categoriesId) . ')')
            ->andWhere('p.publie = 1')
            ->andWhere('p.datePublication < :today')
            ->groupBy('c.id')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->getArrayResult();
    }

    public function findUnpublishedByUser($userId) {
        return $this->createQueryBuilder('p')
            ->join('p.authors', 'a')
            ->where('a.id = '.$userId)
            ->andWhere('p.publie = 0 or p.datePublication > :today')
            ->setParameter('today', new \DateTime())
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Post[]
     */
    public function findFullPosts()
    {
        return $this->createQueryBuilder('p')
            ->join('p.threads', 't')
            ->join('p.authors', 'a')
            ->addSelect('a')
            ->addSelect('t')
            ->getQuery()
            ->getResult();
    }

    public function findNbCreatedByUserSince($date)
    {
        $builder = $this->_em->createQueryBuilder()
            ->from('TerAelisUserBundle:User', 'a')
            ->join('a.posts', 'p');
        if(!empty($date)) {
            $builder = $builder->where('p.datePublication > :date')
                ->setParameter(':date', $date);
        }
        return $builder
            ->andWhere('p.datePublication <= :now')
            ->setParameter(':now', new \DateTime())
            ->groupBy('a.id')
            ->select('a as user')
            ->addSelect('count(p.id) as nb_sujet')
            ->getQuery()
            ->getResult();
    }

    public function findNbCommentsSince($date)
    {
        $builder = $this->createQueryBuilder('p')
            ->join('p.threads', 't')
            ->join('t.comments', 'c')
            ->groupBy('p.id')
            ->select('p as sujet')
            ->addSelect('count(c.id) as nb_comment')
            ->where('c.createdAt <= :now')
            ->setParameter(':now', new \DateTime());
        if(!empty($date)) {
            $builder = $builder->andWhere('c.createdAt > :date')
                ->setParameter(':date', $date);
        }
        return $builder->getQuery()
            ->getResult();

    }

    public function findByPoleSince($date)
    {
        $builder = $this->_em->createQueryBuilder()
            ->from('TerAelisForumBundle:Categorie', 'c')
            ->join('c.posts', 'p');
        if(!empty($date)) {
            $builder = $builder->where('p.datePublication > :date')
                ->setParameter(':date', $date);
        }
        return $builder
            ->andWhere('p.datePublication <= :now')
            ->setParameter(':now', new \DateTime())
            ->groupBy('c.id')
            ->select('c as categorie')
            ->addSelect('count(p.id) as nb_sujet')
            ->getQuery()
            ->getResult();
    }

    public function findMostActivePosts($nb)
    {
        return $this->createQueryBuilder('p')
            ->join('p.authors', 'a')
            ->addSelect('a')
            ->orderBy('p.numberComment', 'DESC')
            ->setMaxResults($nb)
            ->getQuery()
            ->getResult();
    }
}
