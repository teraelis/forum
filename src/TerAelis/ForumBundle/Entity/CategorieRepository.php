<?php

namespace TerAelis\ForumBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use TerAelis\ForumBundle\Controller\ModererController;

/**
 * CategorieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategorieRepository extends NestedTreeRepository
{
    const VISIBLE = ModererController::VISIBLE;
    const CORBEILLE = ModererController::CORBEILLE;

    public function findAll() {
        return $this->createQueryBuilder('c')
            ->addOrderBy('c.root', 'ASC')
            ->addOrderBy('c.lft', 'ASC');
    }

    public function findLast() {
        return $this
            ->createQueryBuilder('c')
            ->orderBy('c.id', 'DESC')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleResult();
    }

    public function findByPost($id) {
        return $this->createQueryBuilder('c')
            ->join('p.mainCategorie', 'c')
            ->where('p.id = '.$id)
            ->getQuery()
            ->getSingleResult();
    }

    public function getChildrenDirectByCategorie(Categorie $categorie = null)
    {
        $query = $this->createQueryBuilder('c');
        if($categorie != null) {
            $query->where('c.lvl = '.($categorie->getLvl() + 1))
                ->andWhere('c.rgt < '.$categorie->getRgt())
                ->andWhere('c.lft > '.$categorie->getLft())
                ->andWhere('c.root = '.$categorie->getRoot());
        } else {
            $query->where('c.lvl = 0');
        }
        $query->orderBy('c.lft')
            ->leftJoin('c.children', 'children')
            ->addSelect('children')
            ->leftJoin('children.lastPost', 'p')
            ->addSelect('p');
        return $query->getQuery()
            ->getResult();
    }

    public function findByType($type) {
        $query = $this->createQueryBuilder('c');
        if ($type == self::CORBEILLE) {
            $query->where('c.root = ?1')
                ->setParameter(1, ModererController::CORBEILLE_ROOT);
        } else {
            $query->where('c.root != ?1')
                ->setParameter(1, ModererController::CORBEILLE_ROOT);
        }
        return $query
            ->addOrderBy('c.root', 'ASC')
            ->addOrderBy('c.lft', 'ASC');
    }

    public function findByArrayId($arrayId) {
        $query = $this->createQueryBuilder('c')
            ->where('0 = 1');
        foreach($arrayId as $id) {
            if(!is_numeric($id))
                return null;

            $query->orWhere('c.id = '.intval($id));
        }
        return $query->getQuery()
            ->getResult();
    }

    public function findFullCategories($categories) {
        $query = $this->createQueryBuilder('c')
            ->leftJoin('c.children', 'child')
            ->addSelect('child');
        if(!empty($categories)) {
            $query->where('1 = 0');
            foreach ($categories as $cat) {
                $query->orWhere('(c.root = ' . $cat->getRoot() . ' and c.lft >= ' . $cat->getLft() . ' and c.rgt <= ' . $cat->getRgt() . ')');
            }
        }
        $query->orderBy('c.lvl', 'DESC');
        return $query->getQuery()->getResult();
    }

    /**
     * @param Categorie[] $categorieList
     * @return Categorie[]
     */
    public function findAllChildrenPosts($categorieList)
    {
        $where = '';
        foreach($categorieList as $categorie) {
            $where .= ' or (c.root = '.$categorie->getRoot().' and c.lft >= '.$categorie->getLft() .' and c.rgt <= '.$categorie->getRgt().')';
        }
        $query = $this->createQueryBuilder('c')
            ->leftJoin('c.lastPost', 'p')
            ->leftJoin('p.lastAuthor', 'a')
            ->leftJoin('c.children', 'child')
            ->addSelect('p')
            ->addSelect('a')
            ->addSelect('child');
        if(!empty($where)) {
            $query->where(substr($where, 4));
        }
        return $query->orderBy('c.lvl', 'DESC')
            ->getQuery()
            ->getResult();
    }
}
