<?php

namespace TerAelis\StatistiquesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ViewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ViewsRepository extends EntityRepository
{
    public function countUniqueViewsByCategories() {
        return $this->createQueryBuilder('v')
            ->select('c.id as id, count(v) AS nb')
            ->join('v.post', 'p')
            ->join('p.categories', 'c')
            ->groupBy('c.id')
            ->getQuery()
            ->getScalarResult();
    }

    public function countViewsByCategories() {
        return $this->createQueryBuilder('v')
            ->select('c.id as id, sum(v.count) AS nb')
            ->join('v.post', 'p')
            ->join('p.categories', 'c')
            ->groupBy('c.id')
            ->getQuery()
            ->getScalarResult();
    }

    public function countUniqueViewsByCategorie($categorie) {
        return $this->createQueryBuilder('v')
            ->select('count(v)')
            ->join('v.post', 'p')
            ->join('p.categories', 'c')
            ->where('c.id = '.$categorie->getId())
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countViewsByCategorie($categorie) {
        return $this->createQueryBuilder('v')
            ->select('sum(v.count)')
            ->join('v.post', 'p')
            ->join('p.categories', 'c')
            ->where('c.id = '.$categorie->getId())
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countUniqueViewsByPostsInCategorie($categorie) {
        return $this->createQueryBuilder('v')
            ->select('p.id as id, count(v) AS nb')
            ->join('v.post', 'p')
            ->join('p.categories', 'c')
            ->where('c.id = '.$categorie)
            ->groupBy('p.id')
            ->getQuery()
            ->getResult();
    }

    public function countViewsByPostsInCategorie($categorie) {
        return $this->createQueryBuilder('v')
            ->select('p.id as id, sum(v.count) AS nb')
            ->join('v.post', 'p')
            ->join('p.categories', 'c')
            ->where('c.id = '.$categorie)
            ->groupBy('c.id')
            ->getQuery()
            ->getResult();
    }

    public function countUniqueViewsByPosts() {
        return $this->createQueryBuilder('v')
            ->select('p.id as id, count(v) AS nb')
            ->join('v.post', 'p')
            ->groupBy('p.id')
            ->getQuery()
            ->getResult();
    }

    public function countViewsByPosts() {
        return $this->createQueryBuilder('v')
            ->select('p.id as id, sum(v.count) AS nb')
            ->join('v.post', 'p')
            ->groupBy('p.id')
            ->getQuery()
            ->getResult();
    }

    public function countUniqueViewsByPost($post) {
        return $this->createQueryBuilder('v')
            ->select('count(v.id)')
            ->join('v.post', 'p')
            ->where('p.id = '.$post)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countViewsByPost($post) {
        return $this->createQueryBuilder('v')
            ->select('sum(v.count)')
            ->join('v.post', 'p')
            ->where('p.id = '.$post)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findOneByIpCategoriePost($ip, $categorie, $post) {
        $res = null;
        $views =  $this->createQueryBuilder('v')
            ->join('v.post', 'p')
            ->join('p.categories', 'c')
            ->where('v.ip = :ip')
            ->andWhere('p.id = '.$post)
            ->andWhere('c.id = '.$categorie)
            ->setParameter('ip', $ip)
            ->getQuery()
            ->setMaxResults(1)
            ->getResult();
        foreach($views as $v) {
            $res = $v;
        }
        return $res;
    }
}
